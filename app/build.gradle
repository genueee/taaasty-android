apply plugin: 'com.android.application'

ext.private = new Properties()
if (rootProject.file('private.properties').exists()) {
    ext.private.load(new FileInputStream(rootProject.file('private.properties')));
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

repositories {
    maven {
        url "https://repo.commonsware.com.s3.amazonaws.com"
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "ru.taaasty"
        minSdkVersion 15
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "API_SERVER_ADDRESS",
                project.ext.private.getProperty("default.ApiServerAddress",
                        "\"http://api.taaasty.ru\"")
        buildConfigField "String", "THUMBOR_SERVER",
                project.ext.private.getProperty("default.ThumborServer", "\"http://thumbor0.tcdn.ru\"")
        buildConfigField "String", "THUMBOR_KEY",
                project.ext.private.getProperty("default.ThumborKey", "\"golobog\"")
        buildConfigField "Boolean", "ENABLE_ACRA", "true"
        buildConfigField "String", "ACRA_FORM_URI",
                project.ext.private.getProperty("default.AcraFormUri",
                        "\"http://acra.icfdev.ru/acra-trainingprocesses/_design/acra-storage/_update/report\"")
        buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_LOGIN",
                project.ext.private.getProperty("default.AcraFormUriBaseAuthLogin",
                        "\"acra\"")
        buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_PASSWORD",
                project.ext.private.getProperty("default.AcraFormUriBaseAuthPassword",
                        "\"acra\"")

        ndk {
            moduleName "libblur"
            cFlags "-fvisibility=hidden -W -Wall -ffast-math -O3 -funroll-loops"
            ldLibs "log", "jnigraphics"
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
    }

    signingConfigs {
        release
        beta
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "dbg-" + getRevision()
            resValue "string", "app_name", "Тейсти dbg-" + getRevision()
            buildConfigField "Boolean", "ENABLE_ACRA", "false"
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        beta {
            versionNameSuffix "b-" + getRevision()
            resValue "string", "app_name", "Тейсти b-" + getRevision()
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.beta
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile(group: 'ch.acra', name: 'acra', version: '4.5.0') {
        exclude(group: 'org.json', module: 'json')
    }

    compile "com.android.support:support-v4:20.0.+"
    compile 'com.android.support:support-annotations:+'
    compile 'com.squareup.retrofit:retrofit:1.6.0'
    compile 'com.squareup.picasso:picasso:2.3.+'
    compile 'com.squareup:pollexor:2.0.2'
    compile 'com.netflix.rxjava:rxjava-android:0.19.+'
    compile 'uk.co.chrisjenx:calligraphy:1.0.+'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.0.+'
    compile 'com.commonsware.cwac:endless:1.2.3'

    compile 'javax.annotation:jsr250-api:1.0'
}

['beta', 'release'].each { typeName ->
    def bt = android.buildTypes[typeName]
    bt.buildConfigField "String", "API_SERVER_ADDRESS",
            project.ext.private.getProperty("${typeName}.ApiServerAddress", "\"http://api.taaasty.ru\"")
    bt.buildConfigField "String", "THUMBOR_KEY",
            project.ext.private.getProperty("${typeName}.ThumborKey", "\"golobog\"")
    bt.buildConfigField "String", "THUMBOR_SERVER",
            project.ext.private.getProperty("${typeName}.ThumborServer", "\"http://thumbor0.tcdn.ru\"")
}

if (ext.private.getProperty('release.StoreFile') != null) {
    android.signingConfigs.release.storeFile = file(ext.private['release.StoreFile'])
    android.signingConfigs.release.storePassword = ext.private['release.StorePassword']
    android.signingConfigs.release.keyAlias = ext.private['release.KeyAlias']
    android.signingConfigs.release.keyPassword = ext.private['release.KeyPassword']
} else {
    android.buildTypes.release.signingConfig = null
}

if (ext.private.getProperty('beta.StoreFile') != null) {
    android.signingConfigs.beta.storeFile = file(ext.private['beta.StoreFile'])
    android.signingConfigs.beta.storePassword = ext.private['beta.StorePassword']
    android.signingConfigs.beta.keyAlias = ext.private['beta.KeyAlias']
    android.signingConfigs.beta.keyPassword = ext.private['beta.KeyPassword']
} else {
    android.buildTypes.beta.signingConfig = null
}